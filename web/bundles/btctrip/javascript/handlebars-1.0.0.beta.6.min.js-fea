var Handlebars = {};
Handlebars.VERSION = "1.0.beta.6", Handlebars.helpers = {}, Handlebars.partials = {}, Handlebars.registerHelper = function (e, t, n) {
    n && (t.not = n), this.helpers[e] = t
}, Handlebars.registerPartial = function (e, t) {
    this.partials[e] = t
}, Handlebars.registerHelper("helperMissing", function (e) {
    if (arguments.length === 2) return undefined;
    throw new Error("Could not find property '" + e + "'")
});
var toString = Object.prototype.toString,
    functionType = "[object Function]";
Handlebars.registerHelper("blockHelperMissing", function (e, t) {
    var n = t.inverse || function () {}, r = t.fn,
        i = "",
        s = toString.call(e);
    s === functionType && (e = e.call(this));
    if (e === !0) return r(this);
    if (e === !1 || e == null) return n(this);
    if (s === "[object Array]") {
        if (e.length > 0) for (var o = 0, u = e.length; o < u; o++) i += r(e[o]);
        else i = n(this);
        return i
    }
    return r(e)
}), Handlebars.registerHelper("each", function (e, t) {
    var n = t.fn,
        r = t.inverse,
        i = "";
    if (e && e.length > 0) for (var s = 0, o = e.length; s < o; s++) i += n(e[s]);
    else i = r(this);
    return i
}), Handlebars.registerHelper("if", function (e, t) {
    var n = toString.call(e);
    return n === functionType && (e = e.call(this)), !e || Handlebars.Utils.isEmpty(e) ? t.inverse(this) : t.fn(this)
}), Handlebars.registerHelper("unless", function (e, t) {
    var n = t.fn,
        r = t.inverse;
    return t.fn = r, t.inverse = n, Handlebars.helpers["if"].call(this, e, t)
}), Handlebars.registerHelper("with", function (e, t) {
    return t.fn(e)
}), Handlebars.registerHelper("log", function (e) {
    Handlebars.log(e)
});
var handlebars = function () {
    var e = {
        trace: function () {},
        yy: {},
        symbols_: {
            error: 2,
            root: 3,
            program: 4,
            EOF: 5,
            statements: 6,
            simpleInverse: 7,
            statement: 8,
            openInverse: 9,
            closeBlock: 10,
            openBlock: 11,
            mustache: 12,
            partial: 13,
            CONTENT: 14,
            COMMENT: 15,
            OPEN_BLOCK: 16,
            inMustache: 17,
            CLOSE: 18,
            OPEN_INVERSE: 19,
            OPEN_ENDBLOCK: 20,
            path: 21,
            OPEN: 22,
            OPEN_UNESCAPED: 23,
            OPEN_PARTIAL: 24,
            params: 25,
            hash: 26,
            param: 27,
            STRING: 28,
            INTEGER: 29,
            BOOLEAN: 30,
            hashSegments: 31,
            hashSegment: 32,
            ID: 33,
            EQUALS: 34,
            pathSegments: 35,
            SEP: 36,
            $accept: 0,
            $end: 1
        },
        terminals_: {
            2: "error",
            5: "EOF",
            14: "CONTENT",
            15: "COMMENT",
            16: "OPEN_BLOCK",
            18: "CLOSE",
            19: "OPEN_INVERSE",
            20: "OPEN_ENDBLOCK",
            22: "OPEN",
            23: "OPEN_UNESCAPED",
            24: "OPEN_PARTIAL",
            28: "STRING",
            29: "INTEGER",
            30: "BOOLEAN",
            33: "ID",
            34: "EQUALS",
            36: "SEP"
        },
        productions_: [0, [3, 2],
            [4, 3],
            [4, 1],
            [4, 0],
            [6, 1],
            [6, 2],
            [8, 3],
            [8, 3],
            [8, 1],
            [8, 1],
            [8, 1],
            [8, 1],
            [11, 3],
            [9, 3],
            [10, 3],
            [12, 3],
            [12, 3],
            [13, 3],
            [13, 4],
            [7, 2],
            [17, 3],
            [17, 2],
            [17, 2],
            [17, 1],
            [25, 2],
            [25, 1],
            [27, 1],
            [27, 1],
            [27, 1],
            [27, 1],
            [26, 1],
            [31, 2],
            [31, 1],
            [32, 3],
            [32, 3],
            [32, 3],
            [32, 3],
            [21, 1],
            [35, 3],
            [35, 1]
        ],
        performAction: function (t, n, r, i, s, o, u) {
            var a = o.length - 1;
            switch (s) {
            case 1:
                return o[a - 1];
            case 2:
                this.$ = new i.ProgramNode(o[a - 2], o[a]);
                break;
            case 3:
                this.$ = new i.ProgramNode(o[a]);
                break;
            case 4:
                this.$ = new i.ProgramNode([]);
                break;
            case 5:
                this.$ = [o[a]];
                break;
            case 6:
                o[a - 1].push(o[a]), this.$ = o[a - 1];
                break;
            case 7:
                this.$ = new i.InverseNode(o[a - 2], o[a - 1], o[a]);
                break;
            case 8:
                this.$ = new i.BlockNode(o[a - 2], o[a - 1], o[a]);
                break;
            case 9:
                this.$ = o[a];
                break;
            case 10:
                this.$ = o[a];
                break;
            case 11:
                this.$ = new i.ContentNode(o[a]);
                break;
            case 12:
                this.$ = new i.CommentNode(o[a]);
                break;
            case 13:
                this.$ = new i.MustacheNode(o[a - 1][0], o[a - 1][1]);
                break;
            case 14:
                this.$ = new i.MustacheNode(o[a - 1][0], o[a - 1][1]);
                break;
            case 15:
                this.$ = o[a - 1];
                break;
            case 16:
                this.$ = new i.MustacheNode(o[a - 1][0], o[a - 1][1]);
                break;
            case 17:
                this.$ = new i.MustacheNode(o[a - 1][0], o[a - 1][1], !0);
                break;
            case 18:
                this.$ = new i.PartialNode(o[a - 1]);
                break;
            case 19:
                this.$ = new i.PartialNode(o[a - 2], o[a - 1]);
                break;
            case 20:
                break;
            case 21:
                this.$ = [
                    [o[a - 2]].concat(o[a - 1]), o[a]
                ];
                break;
            case 22:
                this.$ = [
                    [o[a - 1]].concat(o[a]), null
                ];
                break;
            case 23:
                this.$ = [
                    [o[a - 1]], o[a]
                ];
                break;
            case 24:
                this.$ = [
                    [o[a]], null
                ];
                break;
            case 25:
                o[a - 1].push(o[a]), this.$ = o[a - 1];
                break;
            case 26:
                this.$ = [o[a]];
                break;
            case 27:
                this.$ = o[a];
                break;
            case 28:
                this.$ = new i.StringNode(o[a]);
                break;
            case 29:
                this.$ = new i.IntegerNode(o[a]);
                break;
            case 30:
                this.$ = new i.BooleanNode(o[a]);
                break;
            case 31:
                this.$ = new i.HashNode(o[a]);
                break;
            case 32:
                o[a - 1].push(o[a]), this.$ = o[a - 1];
                break;
            case 33:
                this.$ = [o[a]];
                break;
            case 34:
                this.$ = [o[a - 2], o[a]];
                break;
            case 35:
                this.$ = [o[a - 2], new i.StringNode(o[a])];
                break;
            case 36:
                this.$ = [o[a - 2], new i.IntegerNode(o[a])];
                break;
            case 37:
                this.$ = [o[a - 2], new i.BooleanNode(o[a])];
                break;
            case 38:
                this.$ = new i.IdNode(o[a]);
                break;
            case 39:
                o[a - 2].push(o[a]), this.$ = o[a - 2];
                break;
            case 40:
                this.$ = [o[a]]
            }
        },
        table: [{
                3: 1,
                4: 2,
                5: [2, 4],
                6: 3,
                8: 4,
                9: 5,
                11: 6,
                12: 7,
                13: 8,
                14: [1, 9],
                15: [1, 10],
                16: [1, 12],
                19: [1, 11],
                22: [1, 13],
                23: [1, 14],
                24: [1, 15]
            }, {
                1: [3]
            }, {
                5: [1, 16]
            }, {
                5: [2, 3],
                7: 17,
                8: 18,
                9: 5,
                11: 6,
                12: 7,
                13: 8,
                14: [1, 9],
                15: [1, 10],
                16: [1, 12],
                19: [1, 19],
                20: [2, 3],
                22: [1, 13],
                23: [1, 14],
                24: [1, 15]
            }, {
                5: [2, 5],
                14: [2, 5],
                15: [2, 5],
                16: [2, 5],
                19: [2, 5],
                20: [2, 5],
                22: [2, 5],
                23: [2, 5],
                24: [2, 5]
            }, {
                4: 20,
                6: 3,
                8: 4,
                9: 5,
                11: 6,
                12: 7,
                13: 8,
                14: [1, 9],
                15: [1, 10],
                16: [1, 12],
                19: [1, 11],
                20: [2, 4],
                22: [1, 13],
                23: [1, 14],
                24: [1, 15]
            }, {
                4: 21,
                6: 3,
                8: 4,
                9: 5,
                11: 6,
                12: 7,
                13: 8,
                14: [1, 9],
                15: [1, 10],
                16: [1, 12],
                19: [1, 11],
                20: [2, 4],
                22: [1, 13],
                23: [1, 14],
                24: [1, 15]
            }, {
                5: [2, 9],
                14: [2, 9],
                15: [2, 9],
                16: [2, 9],
                19: [2, 9],
                20: [2, 9],
                22: [2, 9],
                23: [2, 9],
                24: [2, 9]
            }, {
                5: [2, 10],
                14: [2, 10],
                15: [2, 10],
                16: [2, 10],
                19: [2, 10],
                20: [2, 10],
                22: [2, 10],
                23: [2, 10],
                24: [2, 10]
            }, {
                5: [2, 11],
                14: [2, 11],
                15: [2, 11],
                16: [2, 11],
                19: [2, 11],
                20: [2, 11],
                22: [2, 11],
                23: [2, 11],
                24: [2, 11]
            }, {
                5: [2... = "helpers.blockHelperMissing", this.source.push("else { " + e + " = blockHelperMissing.call(" + t + "); }"))
            })
    }, populateParams: function (e, t, n, r, i, s) {
            var o = i || this.options.stringParams || r || this.options.data,
                u = this.popStack(),
                a, f = [],
                l, c, h;
            o ? (this.register("tmp1", n), h = "tmp1") : h = "{ hash: {} }";
            if (o) {
                var p = i ? this.popStack() : "{}";
                this.source.push("tmp1.hash = " + p + ";")
            }
            this.options.stringParams && this.source.push("tmp1.contexts = [];");
            for (var d = 0; d < e; d++) l = this.popStack(), f.push(l), this.options.stringParams && this.source.push("tmp1.contexts.push(" + this.popStack() + ");");
            r && (this.source.push("tmp1.fn = tmp1;"), this.source.push("tmp1.inverse = " + r + ";")), this.options.data && this.source.push("tmp1.data = data;"), f.push(h), this.populateCall(f, u, t || u, s, n !== "{}")
        }, populateCall: function (e, t, n, r, i) {
            var s = ["depth0"].concat(e).join(", "),
                o = ["depth0"].concat(n).concat(e).join(", "),
                u = this.nextStack();
            if (this.usingKnownHelper) this.source.push(u + " = " + t + ".call(" + s + ");");
            else {
                this.context.aliases.functionType = '"function"';
                var a = i ? "foundHelper && " : "";
                this.source.push("if(" + a + "typeof " + t + " === functionType) { " + u + " = " + t + ".call(" + s + "); }")
            }
            r.call(this, u, o, t), this.usingKnownHelper = !1
        }, invokePartial: function (e) {
            params = [this.nameLookup("partials", e, "partial"), "'" + e + "'", this.popStack(), "helpers", "partials"], this.options.data && params.push("data"), this.pushStack("self.invokePartial(" + params.join(", ") + ");")
        }, assignToHash: function (e) {
            var t = this.popStack(),
                n = this.topStack();
            this.source.push(n + "['" + e + "'] = " + t + ";")
        }, compiler: t, compileChildren: function (e, t) {
            var n = e.children,
                r, i;
            for (var s = 0, o = n.length; s < o; s++) {
                r = n[s], i = new this.compiler, this.context.programs.push("");
                var u = this.context.programs.length;
                r.index = u, r.name = "program" + u, this.context.programs[u] = i.compile(r, t, this.context)
            }
        }, programExpression: function (e) {
            if (e == null) return "self.noop";
            var t = this.environment.children[e],
                n = t.depths.list,
                r = [t.index, t.name, "data"];
            for (var i = 0, s = n.length; i < s; i++) depth = n[i], depth === 1 ? r.push("depth0") : r.push("depth" + (depth - 1));
            return n.length === 0 ? "self.program(" + r.join(", ") + ")" : (r.shift(), "self.programWithDepth(" + r.join(", ") + ")")
        }, register: function (e, t) {
            this.useRegister(e), this.source.push(e + " = " + t + ";")
        }, useRegister: function (e) {
            this.context.registers[e] || (this.context.registers[e] = !0, this.context.registers.list.push(e))
        }, pushStack: function (e) {
            return this.source.push(this.nextStack() + " = " + e + ";"), "stack" + this.stackSlot
        }, nextStack: function () {
            return this.stackSlot++, this.stackSlot > this.stackVars.length && this.stackVars.push("stack" + this.stackSlot), "stack" + this.stackSlot
        }, popStack: function () {
            return "stack" + this.stackSlot--
        }, topStack: function () {
            return "stack" + this.stackSlot
        }, quotedString: function (e) {
            return '"' + e.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r") + '"'
        }
};
var i = "break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield".split(" "),
    s = t.RESERVED_WORDS = {};
for (var o = 0, u = i.length; o < u; o++) s[i[o]] = !0;
t.isValidJavaScriptVariableName = function (e) {
    return !t.RESERVED_WORDS[e] && /^[a-zA-Z_$][0-9a-zA-Z_$]+$/.test(e) ? !0 : !1
}
}(Handlebars.Compiler, Handlebars.JavaScriptCompiler), Handlebars.precompile = function (e, t) {
    t = t || {};
    var n = Handlebars.parse(e),
        r = (new Handlebars.Compiler).compile(n, t);
    return (new Handlebars.JavaScriptCompiler).compile(r, t)
}, Handlebars.compile = function (e, t) {
    function r() {
        var n = Handlebars.parse(e),
            r = (new Handlebars.Compiler).compile(n, t),
            i = (new Handlebars.JavaScriptCompiler).compile(r, t, undefined, !0);
        return Handlebars.template(i)
    }
    t = t || {};
    var n;
    return function (e, t) {
        return n || (n = r()), n.call(this, e, t)
    }
}, Handlebars.VM = {
    template: function (e) {
        var t = {
            escapeExpression: Handlebars.Utils.escapeExpression,
            invokePartial: Handlebars.VM.invokePartial,
            programs: [],
            program: function (e, t, n) {
                var r = this.programs[e];
                return n ? Handlebars.VM.program(t, n) : r ? r : (r = this.programs[e] = Handlebars.VM.program(t), r)
            },
            programWithDepth: Handlebars.VM.programWithDepth,
            noop: Handlebars.VM.noop
        };
        return function (n, r) {
            return r = r || {}, e.call(t, Handlebars, n, r.helpers, r.partials, r.data)
        }
    },
    programWithDepth: function (e, t, n) {
        var r = Array.prototype.slice.call(arguments, 2);
        return function (n, i) {
            return i = i || {}, e.apply(this, [n, i.data || t].concat(r))
        }
    },
    program: function (e, t) {
        return function (n, r) {
            return r = r || {}, e(n, r.data || t)
        }
    },
    noop: function () {
        return ""
    },
    invokePartial: function (e, t, n, r, i, s) {
        options = {
            helpers: r,
            partials: i,
            data: s
        };
        if (e === undefined) throw new Handlebars.Exception("The partial " + t + " could not be found");
        if (e instanceof Function) return e(n, options);
        if (!Handlebars.compile) throw new Handlebars.Exception("The partial " + t + " could not be compiled when running in runtime-only mode");
        return i[t] = Handlebars.compile(e), i[t](n, options)
    }
}, Handlebars.template = Handlebars.VM.template